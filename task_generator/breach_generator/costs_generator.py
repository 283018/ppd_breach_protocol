from numpy.random import Generator
from numpy import ndarray, integer, fromiter
from typing import Tuple

from .bp_generator import BPGen, register_generator


@register_generator('demons_costs')
class GeneratorCosts(BPGen):
    def __call__(self, demons:Tuple[ndarray, ...], dev:int=2) -> ndarray:
        """
        Generates costs for demons.
        :param demons: demons tuple generated by GeneratorDemons
        :param dev: random deviation from standard cost of demon's length * 2, can be any integer,
                    if negative absolute value is taken
        :return:
        """
        if not isinstance(dev, (int, integer)):
            raise ValueError("dev should be integer")

        if dev < 0:
            low, high = dev, -dev
        else:
            low, high = -dev, dev

        amo = len(demons)
        costs = self.rng.integers(low, high, size=amo, dtype='int8', endpoint=True)
        costs += fromiter((arr.size for arr in demons), dtype='int8') * 2

        return costs


        # from numpy import zeros
        # return zeros(len(demons))






# if __name__ == '__main__':
#     rng1 = default_rng()
#     costs = rng1.integers(-2, 3, 10, dtype='int8')
#     print(costs)